[{"D:\\Projektai\\photoproof\\src\\index.tsx":"1","D:\\Projektai\\photoproof\\src\\App.tsx":"2","D:\\Projektai\\photoproof\\src\\utils\\makeId.tsx":"3","D:\\Projektai\\photoproof\\src\\firebase.tsx":"4","D:\\Projektai\\photoproof\\src\\types.ts":"5","D:\\Projektai\\photoproof\\src\\components\\Dashboard\\Dashboard.tsx":"6","D:\\Projektai\\photoproof\\src\\components\\NewCollectionPage\\NewCollection.tsx":"7","D:\\Projektai\\photoproof\\src\\components\\SignIn\\SignIn.tsx":"8","D:\\Projektai\\photoproof\\src\\components\\Settings\\Settings.tsx":"9","D:\\Projektai\\photoproof\\src\\components\\CollectionPage\\CollectionPage.tsx":"10","D:\\Projektai\\photoproof\\src\\components\\Dashboard\\CollectionsList\\CollectionsList.tsx":"11","D:\\Projektai\\photoproof\\src\\components\\EditCollection\\EditCollection.tsx":"12"},{"size":199,"mtime":1612088648431,"results":"13","hashOfConfig":"14"},{"size":1800,"mtime":1612522021451,"results":"15","hashOfConfig":"14"},{"size":336,"mtime":1611690852583,"results":"16","hashOfConfig":"14"},{"size":8838,"mtime":1612460441176,"results":"17","hashOfConfig":"14"},{"size":400,"mtime":1611941595334,"results":"18","hashOfConfig":"19"},{"size":804,"mtime":1612371669241,"results":"20","hashOfConfig":"14"},{"size":6236,"mtime":1612532696613,"results":"21","hashOfConfig":"14"},{"size":2071,"mtime":1612284871911,"results":"22","hashOfConfig":"14"},{"size":710,"mtime":1612284911426,"results":"23","hashOfConfig":"14"},{"size":8856,"mtime":1612460934265,"results":"24","hashOfConfig":"14"},{"size":5604,"mtime":1612461079642,"results":"25","hashOfConfig":"14"},{"size":9086,"mtime":1612371917600,"results":"26","hashOfConfig":"14"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},"1bosnlm",{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1jl4ilk",{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"29"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"29"},"D:\\Projektai\\photoproof\\src\\index.tsx",[],["54","55"],"D:\\Projektai\\photoproof\\src\\App.tsx",[],"D:\\Projektai\\photoproof\\src\\utils\\makeId.tsx",[],"D:\\Projektai\\photoproof\\src\\firebase.tsx",[],"D:\\Projektai\\photoproof\\src\\types.ts",[],"D:\\Projektai\\photoproof\\src\\components\\Dashboard\\Dashboard.tsx",[],"D:\\Projektai\\photoproof\\src\\components\\NewCollectionPage\\NewCollection.tsx",[],"D:\\Projektai\\photoproof\\src\\components\\SignIn\\SignIn.tsx",[],"D:\\Projektai\\photoproof\\src\\components\\Settings\\Settings.tsx",[],"D:\\Projektai\\photoproof\\src\\components\\CollectionPage\\CollectionPage.tsx",[],"D:\\Projektai\\photoproof\\src\\components\\Dashboard\\CollectionsList\\CollectionsList.tsx",["56"],"import React, { useEffect, useState } from 'react';\nimport { Link, useHistory } from 'react-router-dom';\nimport { Collection, Photo } from '../../../types';\nimport { getCollections, deleteCollection } from '../../../firebase';\nimport styles from './styles.module.scss';\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  Backdrop,\n  CircularProgress,\n  Button,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogContentText,\n  DialogActions,\n  LinearProgress,\n  IconButton,\n} from '@material-ui/core';\nimport DeleteIcon from '@material-ui/icons/Delete';\n\nconst CollectionList: React.FC = () => {\n  const [collections, setCollections] = useState<Collection[] | null>(null);\n  const [deleteProgress, setDeleteProgress] = useState(0);\n  const [dialogOpen, setDialogOpen] = useState(false);\n  const [requestDeleteId, setRequestDeleteId] = useState('');\n  const [requestDeleteName, setRequestDeleteName] = useState('');\n  const history = useHistory();\n\n  useEffect(() => {\n    getCollections().then((data) => setCollections(data));\n  }, []);\n\n  const selectedPhotos = (photos: Photo[]) => {\n    return photos.filter((photo) => photo.selected).length;\n  };\n\n  const requestToDelete = (collectionId: string) => {\n    setDialogOpen(true);\n    setRequestDeleteId(collectionId);\n    if (collections) {\n      const collectionToDelete = collections.find(\n        (collection) => collection.id === collectionId\n      );\n      if (collectionToDelete) {\n        setRequestDeleteName(collectionToDelete.title);\n      }\n    }\n  };\n\n  const handleAgree = async () => {\n    await deleteCollection(requestDeleteId, setDeleteProgress);\n    setDialogOpen(false);\n    setDeleteProgress(0);\n    if (collections) {\n      const filterRemovedCollection = collections.filter(\n        (collection) => collection.id !== requestDeleteId\n      );\n      if (filterRemovedCollection) {\n        setCollections(filterRemovedCollection);\n      }\n    }\n  };\n\n  const handleCancel = () => {\n    setDialogOpen(false);\n  };\n\n  const handleRowClick = (collectionId: string) => {\n    history.push(`edit/${collectionId}`);\n  };\n\n  if (collections === null) {\n    return (\n      <Backdrop open={true}>\n        <CircularProgress color='inherit' />.\n      </Backdrop>\n    );\n  } else {\n    return (\n      <div>\n        <TableContainer>\n          <Table>\n            <TableHead>\n              <TableRow>\n                <TableCell width='10%'>first image</TableCell>\n                <TableCell width='30%'>name</TableCell>\n                <TableCell width='20%'>status</TableCell>\n                <TableCell>selected photos</TableCell>\n                <TableCell></TableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {collections.map((collection) => {\n                return (\n                  <TableRow key={collection.id} hover={true}>\n                    <TableCell onClick={() => handleRowClick(collection.id)}>\n                      {collection.photos[0] ? (\n                        <picture>\n                          <source\n                            srcSet={collection.photos[0].thumbnailWebp}\n                            type='image/webp'\n                          />\n                          <img\n                            src={collection.photos[0].thumbnail}\n                            alt='first collection img'\n                            className={styles.thumbnail}\n                          />\n                        </picture>\n                      ) : null}\n                    </TableCell>\n                    <TableCell onClick={() => handleRowClick(collection.id)}>\n                      {collection.title}\n                    </TableCell>\n                    <TableCell onClick={() => handleRowClick(collection.id)}>\n                      {collection.status}\n                    </TableCell>\n                    <TableCell onClick={() => handleRowClick(collection.id)}>\n                      {selectedPhotos(collection.photos)}/\n                      {collection.photos.length}\n                    </TableCell>\n                    <TableCell align='right'>\n                      <IconButton\n                        onClick={(event) => requestToDelete(collection.id)}\n                      >\n                        <DeleteIcon />\n                      </IconButton>\n                    </TableCell>\n                  </TableRow>\n                );\n              })}\n            </TableBody>\n          </Table>\n        </TableContainer>\n        <Dialog\n          open={dialogOpen}\n          aria-labelledby='alert-dialog-title'\n          aria-describedby='alert-dialog-description'\n        >\n          <DialogTitle id='alert-dialog-title'>\n            Do you really want to delete collection '{requestDeleteName}'?\n          </DialogTitle>\n          <DialogContent>\n            <DialogContentText id='alert-dialog-description'>\n              Delete action cannot be reverted!\n              <LinearProgress variant='determinate' value={deleteProgress} />\n            </DialogContentText>\n          </DialogContent>\n          <DialogActions>\n            <Button\n              disabled={!!deleteProgress}\n              onClick={handleCancel}\n              color='primary'\n              autoFocus\n            >\n              Cancel\n            </Button>\n            <Button\n              disabled={!!deleteProgress}\n              onClick={handleAgree}\n              color='secondary'\n            >\n              Yes\n            </Button>\n          </DialogActions>\n        </Dialog>\n      </div>\n    );\n  }\n};\n\nexport default CollectionList;\n","D:\\Projektai\\photoproof\\src\\components\\EditCollection\\EditCollection.tsx",["57"],"import React, { useEffect, useState } from 'react';\nimport styles from './styles.module.scss';\nimport { useParams, Link } from 'react-router-dom';\nimport Lightbox from 'react-image-lightbox';\nimport { Collection, Photo } from '../../types';\nimport { getSingleCollection, deletePhotos } from '../../firebase';\n// @ts-ignore\nimport { isWebpSupported } from 'react-image-webp/dist/utils';\nimport {\n  FormControl,\n  InputLabel,\n  MenuItem,\n  Select,\n  Checkbox,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  Toolbar,\n  IconButton,\n  Typography,\n  Tooltip,\n  Backdrop,\n  CircularProgress,\n} from '@material-ui/core';\nimport StarBorderIcon from '@material-ui/icons/StarBorder';\nimport DeleteIcon from '@material-ui/icons/Delete';\n\ninterface Row {\n  id: string;\n  thumbnail: string;\n  filename: string;\n  selected: boolean;\n  comment: string;\n}\n\nconst EditCollection: React.FC = () => {\n  const { id: collectionId } = useParams<{ id: string }>();\n\n  const [collection, setCollection] = useState<Collection | null>(null);\n  const [filteredPhotos, setFilteredPhotos] = useState<Photo[] | null>(null);\n  const [filter, setFilter] = useState('all');\n  const [lightboxIndex, setLightboxIndex] = useState(0);\n  const [lightboxOpen, setLightboxOpen] = useState(false);\n  const [selected, setSelected] = useState<string[]>([]);\n\n  useEffect(() => {\n    getSingleCollection(collectionId).then((collection) => {\n      setCollection(collection);\n      setFilteredPhotos(collection.photos);\n    });\n  }, [collectionId]);\n\n  const changeFilter = (e: React.ChangeEvent<{ value: unknown }>) => {\n    setFilter(e.target.value as string);\n  };\n\n  useEffect(() => {\n    if (collection) {\n      switch (filter) {\n        case 'all':\n          return setFilteredPhotos(collection.photos);\n        case 'selected':\n          const selectedPhotos = collection.photos.filter(\n            (photo) => photo.selected\n          );\n          return setFilteredPhotos(selectedPhotos);\n        case 'unselected':\n          const unselectedPhotos = collection.photos.filter(\n            (photo) => !photo.selected\n          );\n          return setFilteredPhotos(unselectedPhotos);\n      }\n    }\n  }, [filter, collection]);\n\n  const openLightbox = (index: number) => (event: any) => {\n    setLightboxIndex(index);\n    setLightboxOpen(true);\n  };\n\n  const handleSelectAllClick = (event: React.ChangeEvent<HTMLInputElement>) => {\n    if (event.target.checked && filteredPhotos) {\n      const newSelecteds = filteredPhotos.map((n) => n.id);\n      setSelected(newSelecteds);\n      return;\n    }\n    setSelected([]);\n  };\n\n  const handleClick = (event: React.MouseEvent<unknown>, id: string) => {\n    const selectedIndex = selected.indexOf(id);\n    let newSelected: string[] = [];\n\n    if (selectedIndex === -1) {\n      newSelected = newSelected.concat(selected, id);\n    } else if (selectedIndex === 0) {\n      newSelected = newSelected.concat(selected.slice(1));\n    } else if (selectedIndex === selected.length - 1) {\n      newSelected = newSelected.concat(selected.slice(0, -1));\n    } else if (selectedIndex > 0) {\n      newSelected = newSelected.concat(\n        selected.slice(0, selectedIndex),\n        selected.slice(selectedIndex + 1)\n      );\n    }\n\n    setSelected(newSelected);\n  };\n\n  const isSelected = (id: string) => selected.indexOf(id) !== -1;\n\n  const deleteSelected = () => {\n    deletePhotos(collectionId, selected);\n    if (collection) {\n      const removeDeleted = collection.photos.filter((photo) => {\n        for (let id of selected) {\n          if (photo.id === id) {\n            return false;\n          }\n        }\n        return true;\n      });\n      setCollection({\n        ...collection,\n        photos: removeDeleted,\n      });\n    }\n    setSelected([]);\n  };\n\n  if (collection === null || filteredPhotos === null) {\n    return (\n      <Backdrop open={true}>\n        <CircularProgress color='inherit' />.\n      </Backdrop>\n    );\n  } else {\n    return (\n      <div>\n        <Link to='/'>\n          <button>Home</button>\n        </Link>\n        <Typography variant='h4'>{collection.title}</Typography>\n\n        <Toolbar>\n          {selected.length > 0 ? (\n            <div className={styles.toolbarSelected}>\n              <Typography color='inherit' variant='subtitle1' component='div'>\n                {selected.length} to be deleted\n              </Typography>\n              <Tooltip title='Delete'>\n                <IconButton aria-label='delete' onClick={deleteSelected}>\n                  <DeleteIcon />\n                </IconButton>\n              </Tooltip>\n            </div>\n          ) : (\n            <div className={styles.toolbarSelected}></div>\n          )}\n          <FormControl className={styles.toolbarFilter}>\n            <InputLabel>Filter</InputLabel>\n            <Select value={filter} onChange={changeFilter}>\n              <MenuItem value={'all'}>All</MenuItem>\n              <MenuItem value={'selected'}>Selected</MenuItem>\n              <MenuItem value={'unselected'}>Unselected</MenuItem>\n            </Select>\n          </FormControl>\n        </Toolbar>\n        <TableContainer>\n          <Table size='small'>\n            <TableHead>\n              <TableRow>\n                <TableCell padding='checkbox'>\n                  <Checkbox\n                    indeterminate={\n                      selected.length > 0 &&\n                      selected.length < filteredPhotos.length\n                    }\n                    checked={\n                      filteredPhotos.length > 0 &&\n                      selected.length === filteredPhotos.length\n                    }\n                    onChange={handleSelectAllClick}\n                    inputProps={{ 'aria-label': 'select all desserts' }}\n                  />\n                </TableCell>\n                <TableCell>thumbnail</TableCell>\n                <TableCell>filename</TableCell>\n                <TableCell padding='checkbox'></TableCell>\n                <TableCell>comment</TableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {filteredPhotos.map((photo, index) => (\n                <TableRow\n                  key={photo.id}\n                  selected={isSelected(photo.id)}\n                  hover={true}\n                >\n                  <TableCell\n                    padding='checkbox'\n                    onClick={(event) => handleClick(event, photo.id)}\n                  >\n                    <Checkbox\n                      checked={isSelected(photo.id)}\n                      inputProps={{ 'aria-label': 'select all desserts' }}\n                    />\n                  </TableCell>\n                  <TableCell padding='none'>\n                    <picture>\n                      <source srcSet={photo.thumbnailWebp} type='image/webp' />\n                      <img\n                        src={photo.thumbnail}\n                        alt={collection.title}\n                        className={styles.thumbnail}\n                        onClick={openLightbox(index)}\n                      />\n                    </picture>\n                  </TableCell>\n                  <TableCell>{photo.filename}</TableCell>\n                  <TableCell padding='checkbox'>\n                    {photo.selected ? <StarBorderIcon /> : null}\n                  </TableCell>\n                  <TableCell>{photo.comment}</TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        </TableContainer>\n        {lightboxOpen && filteredPhotos.length > 0 && (\n          <Lightbox\n            mainSrc={\n              isWebpSupported\n                ? filteredPhotos[lightboxIndex].cloudUrlWebp\n                : filteredPhotos[lightboxIndex].cloudUrl\n            }\n            nextSrc={\n              isWebpSupported\n                ? filteredPhotos[(lightboxIndex + 1) % filteredPhotos.length]\n                    .cloudUrlWebp\n                : filteredPhotos[(lightboxIndex + 1) % filteredPhotos.length]\n                    .cloudUrl\n            }\n            prevSrc={\n              isWebpSupported\n                ? filteredPhotos[\n                    (lightboxIndex + filteredPhotos.length - 1) %\n                      filteredPhotos.length\n                  ].cloudUrlWebp\n                : filteredPhotos[\n                    (lightboxIndex + filteredPhotos.length - 1) %\n                      filteredPhotos.length\n                  ].cloudUrl\n            }\n            onCloseRequest={() => setLightboxOpen(false)}\n            onMovePrevRequest={() =>\n              setLightboxIndex(\n                (lightboxIndex + filteredPhotos.length - 1) %\n                  filteredPhotos.length\n              )\n            }\n            onMoveNextRequest={() =>\n              setLightboxIndex((lightboxIndex + 1) % filteredPhotos.length)\n            }\n            toolbarButtons={[\n              filteredPhotos[lightboxIndex].selected ? (\n                <StarBorderIcon />\n              ) : null,\n            ]}\n          />\n        )}\n      </div>\n    );\n  }\n};\n\nexport default EditCollection;\n",{"ruleId":"58","replacedBy":"59"},{"ruleId":"60","replacedBy":"61"},{"ruleId":"62","severity":1,"message":"63","line":2,"column":10,"nodeType":"64","messageId":"65","endLine":2,"endColumn":14},{"ruleId":"62","severity":1,"message":"66","line":31,"column":11,"nodeType":"64","messageId":"65","endLine":31,"endColumn":14},"no-native-reassign",["67"],"no-negated-in-lhs",["68"],"@typescript-eslint/no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","'Row' is defined but never used.","no-global-assign","no-unsafe-negation"]