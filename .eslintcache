[{"D:\\Projektai\\photoproof\\src\\index.tsx":"1","D:\\Projektai\\photoproof\\src\\App.tsx":"2","D:\\Projektai\\photoproof\\src\\utils\\makeId.tsx":"3","D:\\Projektai\\photoproof\\src\\firebase.tsx":"4","D:\\Projektai\\photoproof\\src\\types.ts":"5","D:\\Projektai\\photoproof\\src\\components\\Dashboard\\Dashboard.tsx":"6","D:\\Projektai\\photoproof\\src\\components\\NewCollectionPage\\NewCollection.tsx":"7","D:\\Projektai\\photoproof\\src\\components\\SignIn\\SignIn.tsx":"8","D:\\Projektai\\photoproof\\src\\components\\Settings\\Settings.tsx":"9","D:\\Projektai\\photoproof\\src\\components\\CollectionPage\\CollectionPage.tsx":"10","D:\\Projektai\\photoproof\\src\\components\\Dashboard\\CollectionsList\\CollectionsList.tsx":"11","D:\\Projektai\\photoproof\\src\\components\\EditCollection\\EditCollection.tsx":"12","D:\\Projektai\\photoproof\\src\\components\\ConfirmationDialog\\ConfirmationDialog.tsx":"13","D:\\Projektai\\photoproof\\src\\components\\ImageLoader\\ImageLoader.tsx":"14","D:\\Projektai\\photoproof\\src\\components\\Lightbox\\Lightbox.tsx":"15"},{"size":199,"mtime":1612088648431,"results":"16","hashOfConfig":"17"},{"size":1800,"mtime":1612522021451,"results":"18","hashOfConfig":"17"},{"size":336,"mtime":1611690852583,"results":"19","hashOfConfig":"17"},{"size":10596,"mtime":1612886822792,"results":"20","hashOfConfig":"17"},{"size":400,"mtime":1611941595334,"results":"21","hashOfConfig":"22"},{"size":804,"mtime":1612371669241,"results":"23","hashOfConfig":"17"},{"size":6336,"mtime":1612693679207,"results":"24","hashOfConfig":"17"},{"size":2071,"mtime":1612284871911,"results":"25","hashOfConfig":"17"},{"size":710,"mtime":1612284911426,"results":"26","hashOfConfig":"17"},{"size":11268,"mtime":1612887814140,"results":"27","hashOfConfig":"17"},{"size":4870,"mtime":1612816045043,"results":"28","hashOfConfig":"17"},{"size":14320,"mtime":1612810494563,"results":"29","hashOfConfig":"17"},{"size":1325,"mtime":1612631268451,"results":"30","hashOfConfig":"17"},{"size":1609,"mtime":1612709191526,"results":"31","hashOfConfig":"17"},{"size":1776,"mtime":1612691696879,"results":"32","hashOfConfig":"17"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},"1bosnlm",{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1jl4ilk",{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"35"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},"D:\\Projektai\\photoproof\\src\\index.tsx",[],["66","67"],"D:\\Projektai\\photoproof\\src\\App.tsx",[],"D:\\Projektai\\photoproof\\src\\utils\\makeId.tsx",[],["68","69"],"D:\\Projektai\\photoproof\\src\\firebase.tsx",[],"D:\\Projektai\\photoproof\\src\\types.ts",[],"D:\\Projektai\\photoproof\\src\\components\\Dashboard\\Dashboard.tsx",[],"D:\\Projektai\\photoproof\\src\\components\\NewCollectionPage\\NewCollection.tsx",[],"D:\\Projektai\\photoproof\\src\\components\\SignIn\\SignIn.tsx",[],"D:\\Projektai\\photoproof\\src\\components\\Settings\\Settings.tsx",[],"D:\\Projektai\\photoproof\\src\\components\\CollectionPage\\CollectionPage.tsx",[],"D:\\Projektai\\photoproof\\src\\components\\Dashboard\\CollectionsList\\CollectionsList.tsx",[],"D:\\Projektai\\photoproof\\src\\components\\EditCollection\\EditCollection.tsx",["70"],"import React, { useEffect, useState } from 'react';\nimport styles from './styles.module.scss';\nimport { useParams, Link } from 'react-router-dom';\nimport { Collection, Photo } from '../../types';\nimport {\n  getSingleCollection,\n  deletePhotos,\n  addMorePhotos,\n} from '../../firebase';\nimport {\n  FormControl,\n  InputLabel,\n  MenuItem,\n  Select,\n  Checkbox,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  Toolbar,\n  IconButton,\n  Typography,\n  Tooltip,\n  Backdrop,\n  CircularProgress,\n  Button,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  LinearProgress,\n  Box,\n  Paper,\n} from '@material-ui/core';\n\nimport StarBorderIcon from '@material-ui/icons/StarBorder';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport MessageIcon from '@material-ui/icons/Message';\nimport CloseIcon from '@material-ui/icons/Close';\n\nimport ConfirmationDialog from '../ConfirmationDialog/ConfirmationDialog';\nimport { DropzoneArea } from 'material-ui-dropzone';\nimport { useForm, Controller } from 'react-hook-form';\nimport ImageLoader from '../ImageLoader/ImageLoader';\nimport Lightbox from '../Lightbox/Lightbox';\n\nconst EditCollection: React.FC = () => {\n  const { id: collectionId } = useParams<{ id: string }>();\n\n  const [collection, setCollection] = useState<Collection | null>(null);\n  const [filteredPhotos, setFilteredPhotos] = useState<Photo[] | null>(null);\n  const [filter, setFilter] = useState('all');\n  const [photoIndex, setPhotoIndex] = useState(0);\n  const [lightboxOpen, setLightboxOpen] = useState(false);\n  const [selected, setSelected] = useState<string[]>([]);\n  const [deleteDialogOpen, setDeleteDialogOpen] = useState(false);\n  const [progress, setProgress] = useState(0);\n  const [addPhotosDialogOpen, setAddPhotosDialogOpen] = useState(false);\n  const [copied, setCopied] = useState(false);\n  const [commentOpen, setCommentOpen] = useState(false);\n  const [commentTextarea, setCommentTextarea] = useState('');\n\n  useEffect(() => {\n    if (lightboxOpen) {\n      document.body.style.overflow = 'hidden';\n    } else if (!lightboxOpen) {\n      document.body.style.overflow = 'unset';\n    }\n  }, [lightboxOpen]);\n\n  const { handleSubmit, errors, control } = useForm<any>({\n    defaultValues: { files: [] },\n  });\n\n  useEffect(() => {\n    getSingleCollection(collectionId).then((collection) => {\n      setCollection(collection);\n      setFilteredPhotos(collection.photos);\n    });\n  }, [collectionId]);\n\n  const changeFilter = (e: React.ChangeEvent<{ value: unknown }>) => {\n    setFilter(e.target.value as string);\n  };\n\n  useEffect(() => {\n    if (collection) {\n      switch (filter) {\n        case 'all':\n          return setFilteredPhotos(collection.photos);\n        case 'selected':\n          const selectedPhotos = collection.photos.filter(\n            (photo) => photo.selected\n          );\n          return setFilteredPhotos(selectedPhotos);\n        case 'unselected':\n          const unselectedPhotos = collection.photos.filter(\n            (photo) => !photo.selected\n          );\n          return setFilteredPhotos(unselectedPhotos);\n      }\n    }\n  }, [filter, collection]);\n\n  const openLightbox = (index: number) => (event: any) => {\n    setPhotoIndex(index);\n    setLightboxOpen(true);\n  };\n\n  const handleSelectAllClick = (event: React.ChangeEvent<HTMLInputElement>) => {\n    if (event.target.checked && filteredPhotos) {\n      const newSelecteds = filteredPhotos.map((n) => n.id);\n      setSelected(newSelecteds);\n      return;\n    }\n    setSelected([]);\n  };\n\n  const handleClick = (event: React.MouseEvent<unknown>, id: string) => {\n    const selectedIndex = selected.indexOf(id);\n    let newSelected: string[] = [];\n\n    if (selectedIndex === -1) {\n      newSelected = newSelected.concat(selected, id);\n    } else if (selectedIndex === 0) {\n      newSelected = newSelected.concat(selected.slice(1));\n    } else if (selectedIndex === selected.length - 1) {\n      newSelected = newSelected.concat(selected.slice(0, -1));\n    } else if (selectedIndex > 0) {\n      newSelected = newSelected.concat(\n        selected.slice(0, selectedIndex),\n        selected.slice(selectedIndex + 1)\n      );\n    }\n    setSelected(newSelected);\n  };\n\n  const isSelected = (id: string) => selected.indexOf(id) !== -1;\n\n  const agreeDeleteDialog = async () => {\n    await deletePhotos(collectionId, selected, setProgress);\n    if (collection) {\n      const removeDeleted = collection.photos.filter((photo) => {\n        for (let id of selected) {\n          if (photo.id === id) {\n            return false;\n          }\n        }\n        return true;\n      });\n      setCollection({\n        ...collection,\n        photos: removeDeleted,\n      });\n    }\n    setSelected([]);\n    setDeleteDialogOpen(false);\n    setProgress(0);\n  };\n\n  const onConfirmUpload = async (data: { files: FileList }) => {\n    console.log(data);\n    await addMorePhotos(collectionId, data.files, setProgress);\n    setAddPhotosDialogOpen(false);\n    setProgress(0);\n    getSingleCollection(collectionId).then((collection) => {\n      setCollection(collection);\n    });\n  };\n\n  const copyUrl = (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n    const button = e.target as HTMLElement;\n    navigator.clipboard.writeText(button.innerHTML);\n    setCopied(true);\n    setTimeout(() => {\n      setCopied(false);\n    }, 2000);\n  };\n\n  const copySelections = (\n    e: React.MouseEvent<HTMLButtonElement, MouseEvent>\n  ) => {\n    if (collection) {\n      const filenames = collection.photos\n        .filter((photo) => photo.selected)\n        .map((photo) => photo.filename);\n\n      navigator.clipboard.writeText(filenames.join(' '));\n    }\n    setCopied(true);\n    setTimeout(() => {\n      setCopied(false);\n    }, 2000);\n  };\n\n  const openCommentModal = (index?: number) => {\n    setCommentOpen(true);\n    if (filteredPhotos) {\n      if (index) {\n        setPhotoIndex(index);\n        setCommentTextarea(filteredPhotos[index].comment);\n      } else {\n        setCommentTextarea(filteredPhotos[photoIndex].comment);\n      }\n    }\n  };\n\n  if (collection === null || filteredPhotos === null) {\n    return (\n      <Backdrop open={true}>\n        <CircularProgress color='inherit' />.\n      </Backdrop>\n    );\n  }\n\n  return (\n    <div>\n      <Button to='/' component={Link} variant='outlined'>\n        Home\n      </Button>\n      <Typography variant='h4'>{collection.title}</Typography>\n      <Typography>\n        Client URL:{' '}\n        <Tooltip title={copied ? 'copied!' : 'copy'}>\n          <Button onClick={copyUrl}>\n            {`${window.location.origin.toString()}/collection/${collectionId}`}{' '}\n          </Button>\n        </Tooltip>\n        <Button\n          to={`/collection/${collectionId}`}\n          component={Link}\n          variant='outlined'\n        >\n          View\n        </Button>\n      </Typography>\n      <Toolbar>\n        {selected.length > 0 ? (\n          <div className={styles.toolbarSelected}>\n            <Typography color='inherit' variant='subtitle1' component='div'>\n              {selected.length} to be deleted\n            </Typography>\n            <Tooltip title='Delete'>\n              <IconButton\n                aria-label='delete'\n                onClick={() => setDeleteDialogOpen(true)}\n              >\n                <DeleteIcon />\n              </IconButton>\n            </Tooltip>\n          </div>\n        ) : (\n          <div className={styles.toolbarSelected}>\n            <Button\n              onClick={() => {\n                setAddPhotosDialogOpen(true);\n              }}\n              variant='outlined'\n            >\n              Add photos\n            </Button>\n            <Tooltip title={copied ? 'copied!' : 'copy'}>\n              <Button onClick={copySelections} variant='outlined'>\n                Copy selections\n              </Button>\n            </Tooltip>\n          </div>\n        )}\n        <FormControl className={styles.toolbarFilter}>\n          <InputLabel>Filter</InputLabel>\n          <Select value={filter} onChange={changeFilter}>\n            <MenuItem value={'all'}>All</MenuItem>\n            <MenuItem value={'selected'}>Selected</MenuItem>\n            <MenuItem value={'unselected'}>Unselected</MenuItem>\n          </Select>\n        </FormControl>\n      </Toolbar>\n      <TableContainer>\n        <Table size='small'>\n          <TableHead>\n            <TableRow>\n              <TableCell padding='checkbox'>\n                <Checkbox\n                  indeterminate={\n                    selected.length > 0 &&\n                    selected.length < filteredPhotos.length\n                  }\n                  checked={\n                    filteredPhotos.length > 0 &&\n                    selected.length === filteredPhotos.length\n                  }\n                  onChange={handleSelectAllClick}\n                />\n              </TableCell>\n              <TableCell width='10%'>thumbnail</TableCell>\n              <TableCell width='30%'>filename</TableCell>\n              <TableCell padding='checkbox'></TableCell>\n              <TableCell>comment</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {filteredPhotos.map((photo, index) => (\n              <TableRow\n                key={photo.id}\n                selected={isSelected(photo.id)}\n                hover={true}\n              >\n                <TableCell\n                  padding='checkbox'\n                  onClick={(event) => handleClick(event, photo.id)}\n                >\n                  <Checkbox checked={isSelected(photo.id)} />\n                </TableCell>\n                <TableCell padding='none'>\n                  <ImageLoader photo={photo} width={150} height={100}>\n                    <picture>\n                      <source srcSet={photo.thumbnailWebp} type='image/webp' />\n                      <img\n                        src={photo.thumbnail}\n                        alt={collection.title}\n                        className={styles.thumbnail}\n                        onClick={openLightbox(index)}\n                      />\n                    </picture>\n                  </ImageLoader>\n                </TableCell>\n                <TableCell>{photo.filename}</TableCell>\n                <TableCell padding='checkbox'>\n                  {photo.selected ? <StarBorderIcon /> : null}\n                </TableCell>\n                <TableCell>{photo.comment}</TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </TableContainer>\n      {lightboxOpen && filteredPhotos.length > 0 && (\n        <Lightbox\n          filteredPhotos={filteredPhotos}\n          setLightboxOpen={setLightboxOpen}\n          lightboxIndex={photoIndex}\n          setLightboxIndex={setPhotoIndex}\n          toolbarButtons={[\n            filteredPhotos[photoIndex].comment.length > 0 ? (\n              <IconButton\n                className={styles.toolbarIcon}\n                onClick={() => openCommentModal()}\n              >\n                <MessageIcon />\n              </IconButton>\n            ) : (\n              <div className={styles.toolbarIcon}></div>\n            ),\n            filteredPhotos[photoIndex].selected ? (\n              <IconButton className={styles.toolbarIcon} disabled>\n                <StarBorderIcon />\n              </IconButton>\n            ) : (\n              <div className={styles.toolbarIcon}></div>\n            ),\n          ]}\n        />\n      )}\n      <ConfirmationDialog\n        dialogOpen={deleteDialogOpen}\n        progress={progress}\n        onClickCancel={() => setDeleteDialogOpen(false)}\n        onClickAgree={agreeDeleteDialog}\n        dialogTitle={'Do you really want to delete these photos?'}\n        dialogContentText={'Delete action cannot be reverted!'}\n      />\n      <Dialog open={addPhotosDialogOpen}>\n        <form onSubmit={handleSubmit(onConfirmUpload)}>\n          <DialogTitle id='alert-dialog-title'>Add photos</DialogTitle>\n          <DialogContent>\n            {progress ? (\n              <Box p={'3px'}>\n                <LinearProgress variant='determinate' value={progress} />\n              </Box>\n            ) : (\n              <Box p={'5px'}></Box>\n            )}\n            <Controller\n              name='files'\n              control={control}\n              render={({ onChange }) => (\n                <DropzoneArea\n                  acceptedFiles={['image/jpeg']}\n                  dropzoneText={'Drop images or click to upload here'}\n                  onChange={(files) => {\n                    return onChange([...files]);\n                  }}\n                  filesLimit={999}\n                  previewGridClasses={{\n                    container: styles.previewContainer,\n                    item: `${styles.previewItem} itemReference`,\n                    image: styles.previewImage,\n                  }}\n                  previewGridProps={{\n                    container: {\n                      spacing: 1,\n                    },\n                    item: { sm: 2, lg: 2, md: 2 },\n                  }}\n                  showAlerts={false}\n                  showPreviewsInDropzone={false}\n                  showPreviews={true}\n                  showFileNamesInPreview={true}\n                  dropzoneClass={styles.dropzone}\n                />\n              )}\n            />\n          </DialogContent>\n          <DialogActions>\n            <Button\n              disabled={!!progress}\n              onClick={() => setAddPhotosDialogOpen(false)}\n              color='secondary'\n            >\n              Cancel\n            </Button>\n            <Button disabled={!!progress} color='primary' type='submit'>\n              Yes\n            </Button>\n          </DialogActions>\n        </form>\n      </Dialog>\n\n      <Dialog open={commentOpen} onClose={() => setCommentOpen(false)}>\n        <IconButton\n          onClick={() => setCommentOpen(false)}\n          className={styles.exitBtn}\n        >\n          <CloseIcon />\n        </IconButton>\n        <DialogTitle id='alert-dialog-title'>Comment</DialogTitle>\n        <DialogContent>\n          <Paper className={styles.commentTextContainer} elevation={3}>\n            <Typography>{commentTextarea}</Typography>\n          </Paper>\n          <DialogActions></DialogActions>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n};\n\nexport default EditCollection;\n","D:\\Projektai\\photoproof\\src\\components\\ConfirmationDialog\\ConfirmationDialog.tsx",[],"D:\\Projektai\\photoproof\\src\\components\\ImageLoader\\ImageLoader.tsx",[],"D:\\Projektai\\photoproof\\src\\components\\Lightbox\\Lightbox.tsx",[],{"ruleId":"71","replacedBy":"72"},{"ruleId":"73","replacedBy":"74"},{"ruleId":"71","replacedBy":"75"},{"ruleId":"73","replacedBy":"76"},{"ruleId":"77","severity":1,"message":"78","line":73,"column":25,"nodeType":"79","messageId":"80","endLine":73,"endColumn":31},"no-native-reassign",["81"],"no-negated-in-lhs",["82"],["81"],["82"],"@typescript-eslint/no-unused-vars","'errors' is assigned a value but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]