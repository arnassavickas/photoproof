[{"D:\\Projektai\\photoproof\\src\\index.tsx":"1","D:\\Projektai\\photoproof\\src\\App.tsx":"2","D:\\Projektai\\photoproof\\src\\components\\NewCollection.tsx":"3","D:\\Projektai\\photoproof\\src\\utils\\makeId.tsx":"4","D:\\Projektai\\photoproof\\src\\components\\Settings.tsx":"5","D:\\Projektai\\photoproof\\src\\firebase.tsx":"6","D:\\Projektai\\photoproof\\src\\components\\SignIn.tsx":"7","D:\\Projektai\\photoproof\\src\\types.ts":"8","D:\\Projektai\\photoproof\\src\\components\\CollectionPage.tsx":"9","D:\\Projektai\\photoproof\\src\\components\\Dashboard\\Dashboard.tsx":"10","D:\\Projektai\\photoproof\\src\\components\\Dashboard\\CollectionsList.tsx":"11"},{"size":199,"mtime":1612088648431,"results":"12","hashOfConfig":"13"},{"size":1391,"mtime":1612094269461,"results":"14","hashOfConfig":"13"},{"size":3476,"mtime":1612115711802,"results":"15","hashOfConfig":"13"},{"size":336,"mtime":1611690852583,"results":"16","hashOfConfig":"13"},{"size":710,"mtime":1612088684710,"results":"17","hashOfConfig":"13"},{"size":5917,"mtime":1612210256537,"results":"18","hashOfConfig":"13"},{"size":2068,"mtime":1612088693961,"results":"19","hashOfConfig":"13"},{"size":400,"mtime":1611941595334,"results":"20","hashOfConfig":"13"},{"size":8377,"mtime":1612211585235,"results":"21","hashOfConfig":"13"},{"size":692,"mtime":1612094084681,"results":"22","hashOfConfig":"13"},{"size":1917,"mtime":1612210505400,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"1jl4ilk",{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"26"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"D:\\Projektai\\photoproof\\src\\index.tsx",[],["49","50"],"D:\\Projektai\\photoproof\\src\\App.tsx",[],"D:\\Projektai\\photoproof\\src\\components\\NewCollection.tsx",["51","52"],"import React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { generateNewCollection } from '../firebase';\nimport { useForm, Controller } from 'react-hook-form';\n\ntype Inputs = {\n  files: FileList;\n  title: string;\n  minSelectRequired: boolean;\n  minSelectGoal: number;\n  maxSelectRequired: boolean;\n  maxSelectGoal: number;\n  allowComments: boolean;\n};\n\nconst NewCollection: React.FC = () => {\n  const { register, handleSubmit, watch, errors, getValues } = useForm<Inputs>({\n    mode: 'onChange',\n  });\n\n  const minToggle = watch('minSelectRequired');\n  const maxToggle = watch('maxSelectRequired');\n\n  const onSubmit = (data: Inputs) => {\n    console.log(data);\n    generateNewCollection(\n      {\n        title: data.title,\n        minSelect: {\n          required: data.minSelectRequired,\n          goal: data.minSelectGoal,\n        },\n        maxSelect: {\n          required: data.maxSelectRequired,\n          goal: data.maxSelectGoal,\n        },\n        allowComments: data.allowComments,\n      },\n      data.files\n    );\n  };\n\n  return (\n    <div>\n      <Link to='/dashboard'>\n        <button>cancel</button>\n      </Link>\n      <h2>new collection</h2>\n      <form onSubmit={handleSubmit(onSubmit)}>\n        <div>\n          title\n          <input\n            name='title'\n            ref={register({ required: true, maxLength: 50 })}\n          />\n        </div>\n        <div>\n          upload photos\n          <input\n            name='files'\n            type='file'\n            ref={register({ required: true })}\n            multiple\n          />\n        </div>\n        <div>\n          add watermark\n          <input type='checkbox' />\n        </div>\n        <div>\n          allow comments\n          <input name='allowComments' type='checkbox' ref={register} />\n        </div>\n        <div>selection goals</div>\n        <div>\n          minimum:\n          <input name='minSelectRequired' type='checkbox' ref={register} />\n          <div style={{ display: minToggle ? 'inline' : 'none' }}>\n            <input\n              name='minSelectGoal'\n              type='number'\n              min='1'\n              ref={register({\n                min: '1',\n                max: '999',\n                valueAsNumber: true,\n                validate: {\n                  lowerThanMax: (value) =>\n                    !getValues('maxSelectRequired') ||\n                    getValues('maxSelectGoal') >= value,\n                },\n              })}\n            />\n            {errors.minSelectGoal && (\n              <span>Must be higher than maximum value</span>\n            )}\n          </div>\n        </div>\n        <div>\n          maximum:\n          <input name='maxSelectRequired' type='checkbox' ref={register} />\n          <div style={{ display: maxToggle ? 'inline' : 'none' }}>\n            <input\n              name='maxSelectGoal'\n              type='number'\n              min='1'\n              ref={register({\n                min: '1',\n                max: '999',\n                valueAsNumber: true,\n                validate: {\n                  higherThanMin: (value) => getValues('minSelectGoal') <= value,\n                },\n              })}\n            />\n            {errors.maxSelectGoal && (\n              <span>Must be higher than minimum value</span>\n            )}\n          </div>\n        </div>\n        <div>\n          <button type='submit'>save</button>\n        </div>\n      </form>\n    </div>\n  );\n};\n\nexport default NewCollection;\n","D:\\Projektai\\photoproof\\src\\utils\\makeId.tsx",[],"D:\\Projektai\\photoproof\\src\\components\\Settings.tsx",[],"D:\\Projektai\\photoproof\\src\\firebase.tsx",[],"D:\\Projektai\\photoproof\\src\\components\\SignIn.tsx",[],"D:\\Projektai\\photoproof\\src\\types.ts",[],"D:\\Projektai\\photoproof\\src\\components\\CollectionPage.tsx",["53"],"import React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport Lightbox from 'react-image-lightbox';\nimport { Collection, Photo } from '../types';\nimport {\n  getSingleCollection,\n  updatePhotoSelection,\n  updatePhotoComment,\n} from '../firebase';\n// @ts-ignore\nimport { isWebpSupported } from 'react-image-webp/dist/utils';\nimport { FormControl, InputLabel, MenuItem, Select } from '@material-ui/core';\n\nconst CollectionPage: React.FC = () => {\n  const { id: collectionId } = useParams<{ id: string }>();\n  const [collection, setCollection] = useState<Collection | null>(null);\n  const [filteredPhotos, setFilteredPhotos] = useState<Photo[] | null>(null);\n  const [filter, setFilter] = useState('all');\n  const [lightboxIndex, setLightboxIndex] = useState(0);\n  const [lightboxOpen, setLightboxOpen] = useState(false);\n  const [commentOpen, setCommentOpen] = useState(false);\n  const [commentTextarea, setCommentTextarea] = useState('');\n\n  useEffect(() => {\n    getSingleCollection(collectionId).then((collection) => {\n      setCollection(collection);\n      setFilteredPhotos(collection.photos);\n    });\n  }, [collectionId]);\n\n  const changeFilter = (e: React.ChangeEvent<{ value: unknown }>) => {\n    setFilter(e.target.value as string);\n  };\n\n  useEffect(() => {\n    if (collection) {\n      switch (filter) {\n        case 'all':\n          return setFilteredPhotos(collection.photos);\n        case 'selected':\n          const selectedPhotos = collection.photos.filter(\n            (photo) => photo.selected\n          );\n          if (selectedPhotos.length === 0) {\n            setLightboxOpen(false);\n          } else if (selectedPhotos.length <= lightboxIndex) {\n            setLightboxIndex(selectedPhotos.length - 1);\n          }\n          return setFilteredPhotos(selectedPhotos);\n        case 'unselected':\n          const unselectedPhotos = collection.photos.filter(\n            (photo) => !photo.selected\n          );\n          if (unselectedPhotos.length === 0) {\n            setLightboxOpen(false);\n          } else if (unselectedPhotos.length <= lightboxIndex) {\n            setLightboxIndex(unselectedPhotos.length - 1);\n          }\n\n          return setFilteredPhotos(unselectedPhotos);\n      }\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [filter, collection]);\n\n  const selectPhoto = (photoId: string) => (event: any) => {\n    try {\n      const clickedPhoto = collection?.photos.find(\n        (photo) => photo.id === photoId\n      );\n      if (clickedPhoto && collection) {\n        updatePhotoSelection(collectionId, photoId, !clickedPhoto.selected);\n        clickedPhoto.selected = !clickedPhoto?.selected;\n        setCollection({\n          ...collection,\n          photos: collection.photos.map((photo) =>\n            photo.id === photoId ? clickedPhoto : photo\n          ),\n        });\n      }\n    } catch (err) {\n      //\n    }\n  };\n\n  const selectPhotoFullscreen = () => {\n    if (filteredPhotos && collection) {\n      try {\n        const clickedPhoto = filteredPhotos[lightboxIndex];\n        if (clickedPhoto && collection) {\n          updatePhotoSelection(\n            collectionId,\n            clickedPhoto.id,\n            !clickedPhoto.selected\n          );\n          clickedPhoto.selected = !clickedPhoto?.selected;\n          setCollection({\n            ...collection,\n            photos: collection.photos.map((photo) =>\n              photo.id === clickedPhoto.id ? clickedPhoto : photo\n            ),\n          });\n        }\n      } catch (err) {\n        console.error(err);\n      }\n    }\n  };\n\n  const openLightbox = (index: number) => (event: any) => {\n    setLightboxIndex(index);\n    setLightboxOpen(true);\n  };\n\n  const savePhotoComment = () => {\n    setCommentOpen(false);\n    if (filteredPhotos && collection) {\n      try {\n        const clickedPhoto = filteredPhotos[lightboxIndex];\n        if (clickedPhoto && collection) {\n          updatePhotoComment(collectionId, clickedPhoto.id, commentTextarea);\n          clickedPhoto.comment = commentTextarea;\n          setCollection({\n            ...collection,\n            photos: collection.photos.map((photo) =>\n              photo.id === clickedPhoto.id ? clickedPhoto : photo\n            ),\n          });\n        }\n      } catch (err) {\n        console.error(err);\n      }\n    }\n  };\n\n  const openCommentModal = () => {\n    setCommentOpen(true);\n    if (filteredPhotos) {\n      setCommentTextarea(filteredPhotos[lightboxIndex].comment);\n    }\n  };\n\n  const closeCommentModal = () => {\n    setCommentOpen(false);\n  };\n\n  const handleCommentTextarea = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\n    e.preventDefault();\n    setCommentTextarea(e.target.value);\n  };\n\n  if (collection === null || filteredPhotos === null) {\n    return <div>loading...</div>;\n  } else {\n    return (\n      <div>\n        <h2>{collection.title}</h2>\n        <FormControl>\n          <InputLabel>Filter</InputLabel>\n          <Select value={filter} onChange={changeFilter}>\n            <MenuItem value={'all'}>All</MenuItem>\n            <MenuItem value={'selected'}>Selected</MenuItem>\n            <MenuItem value={'unselected'}>Unselected</MenuItem>\n          </Select>\n        </FormControl>\n        <div className='photo-grid'>\n          {filteredPhotos.map((photo, index) => {\n            return (\n              <div\n                className='photo-thumbnail-container'\n                key={photo.id}\n                style={{\n                  border: photo.selected ? '2px solid green' : 'none',\n                  padding: photo.selected ? 0 : 2,\n                }}\n                onClick={openLightbox(Number(index))}\n              >\n                <picture>\n                  <source srcSet={photo.cloudUrlWebp} type='image/webp' />\n                  <img src={photo.cloudUrl} alt={collection.title} />\n                </picture>\n              </div>\n            );\n          })}\n          {collection.photos.length === 0 ? (\n            <div>no photos in collection</div>\n          ) : filteredPhotos.length === 0 ? (\n            <div>no photos in this filter</div>\n          ) : null}\n        </div>\n        {lightboxOpen && filteredPhotos.length > 0 && (\n          <Lightbox\n            mainSrc={\n              isWebpSupported\n                ? filteredPhotos[lightboxIndex].cloudUrlWebp\n                : filteredPhotos[lightboxIndex].cloudUrl\n            }\n            nextSrc={\n              isWebpSupported\n                ? filteredPhotos[(lightboxIndex + 1) % filteredPhotos.length]\n                    .cloudUrlWebp\n                : filteredPhotos[(lightboxIndex + 1) % filteredPhotos.length]\n                    .cloudUrl\n            }\n            prevSrc={\n              isWebpSupported\n                ? filteredPhotos[\n                    (lightboxIndex + filteredPhotos.length - 1) %\n                      filteredPhotos.length\n                  ].cloudUrlWebp\n                : filteredPhotos[\n                    (lightboxIndex + filteredPhotos.length - 1) %\n                      filteredPhotos.length\n                  ].cloudUrl\n            }\n            onCloseRequest={() => setLightboxOpen(false)}\n            onMovePrevRequest={() =>\n              setLightboxIndex(\n                (lightboxIndex + filteredPhotos.length - 1) %\n                  filteredPhotos.length\n              )\n            }\n            onMoveNextRequest={() =>\n              setLightboxIndex((lightboxIndex + 1) % filteredPhotos.length)\n            }\n            toolbarButtons={[\n              <button onClick={selectPhotoFullscreen}>\n                {filteredPhotos[lightboxIndex].selected ? 'deselect' : 'select'}\n              </button>,\n              <button onClick={openCommentModal}>comment</button>,\n            ]}\n          />\n        )}\n        {commentOpen && (\n          <div\n            style={{\n              backgroundColor: 'red',\n              width: 200,\n              height: 200,\n              position: 'absolute',\n              zIndex: 1001,\n            }}\n          >\n            <textarea\n              value={commentTextarea}\n              onChange={handleCommentTextarea}\n            ></textarea>\n            <button onClick={savePhotoComment}>save</button>\n            <button onClick={closeCommentModal}>cancel</button>\n          </div>\n        )}\n      </div>\n    );\n  }\n};\n\nexport default CollectionPage;\n","D:\\Projektai\\photoproof\\src\\components\\Dashboard\\Dashboard.tsx",[],"D:\\Projektai\\photoproof\\src\\components\\Dashboard\\CollectionsList.tsx",[],{"ruleId":"54","replacedBy":"55"},{"ruleId":"56","replacedBy":"57"},{"ruleId":"58","severity":1,"message":"59","line":1,"column":17,"nodeType":"60","messageId":"61","endLine":1,"endColumn":25},{"ruleId":"58","severity":1,"message":"62","line":4,"column":19,"nodeType":"60","messageId":"61","endLine":4,"endColumn":29},{"ruleId":"58","severity":1,"message":"63","line":66,"column":9,"nodeType":"60","messageId":"61","endLine":66,"endColumn":20},"no-native-reassign",["64"],"no-negated-in-lhs",["65"],"@typescript-eslint/no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'Controller' is defined but never used.","'selectPhoto' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]