[{"D:\\Projektai\\photoproof\\src\\index.tsx":"1","D:\\Projektai\\photoproof\\src\\App.tsx":"2","D:\\Projektai\\photoproof\\src\\utils\\makeId.tsx":"3","D:\\Projektai\\photoproof\\src\\firebase.tsx":"4","D:\\Projektai\\photoproof\\src\\types.ts":"5","D:\\Projektai\\photoproof\\src\\components\\Dashboard\\Dashboard.tsx":"6","D:\\Projektai\\photoproof\\src\\components\\NewCollectionPage\\NewCollection.tsx":"7","D:\\Projektai\\photoproof\\src\\components\\SignIn\\SignIn.tsx":"8","D:\\Projektai\\photoproof\\src\\components\\Settings\\Settings.tsx":"9","D:\\Projektai\\photoproof\\src\\components\\CollectionPage\\CollectionPage.tsx":"10","D:\\Projektai\\photoproof\\src\\components\\Dashboard\\CollectionsList\\CollectionsList.tsx":"11","D:\\Projektai\\photoproof\\src\\components\\EditCollection\\EditCollection.tsx":"12","D:\\Projektai\\photoproof\\src\\components\\ConfirmationDialog\\ConfirmationDialog.tsx":"13","D:\\Projektai\\photoproof\\src\\components\\ImageLoader\\ImageLoader.tsx":"14","D:\\Projektai\\photoproof\\src\\components\\Lightbox\\Lightbox.tsx":"15","D:\\Projektai\\photoproof\\src\\components\\CollectionPage\\LockedView\\LockedView.tsx":"16","D:\\Projektai\\photoproof\\src\\components\\CollectionPage\\SelectionView\\SelectionView.tsx":"17","D:\\Projektai\\photoproof\\src\\components\\EditCollection\\CollectionDetails\\CollectionDetails.tsx":"18","D:\\Projektai\\photoproof\\src\\config.js":"19","D:\\Projektai\\photoproof\\src\\components\\EditCollection\\PhotoTableToolbar\\PhotoTableToolbar.tsx":"20","D:\\Projektai\\photoproof\\src\\components\\EditCollection\\PhotoTable\\PhotoTable.tsx":"21","D:\\Projektai\\photoproof\\src\\components\\EditCollection\\AddPhotosDialog\\AddPhotosDialog.tsx":"22","D:\\Projektai\\photoproof\\src\\components\\CommentDialog\\CommentDialog.tsx":"23","D:\\Projektai\\photoproof\\src\\components\\CollectionPage\\PhotoGrid\\PhotoGrid.tsx":"24","D:\\Projektai\\photoproof\\src\\components\\CollectionPage\\SelectionView\\ConfirmationForbiddenDialog\\ConfirmationForbiddenDialog.tsx":"25","D:\\Projektai\\photoproof\\src\\components\\CollectionPage\\SelectionView\\SelectionConfirmationDialog\\SelectionConfirmationDialog.tsx":"26"},{"size":220,"mtime":1613212981658,"results":"27","hashOfConfig":"28"},{"size":2013,"mtime":1613220717147,"results":"29","hashOfConfig":"28"},{"size":336,"mtime":1611690852583,"results":"30","hashOfConfig":"28"},{"size":12040,"mtime":1613218859384,"results":"31","hashOfConfig":"28"},{"size":4253,"mtime":1613310558311,"results":"32","hashOfConfig":"28"},{"size":615,"mtime":1613216539250,"results":"33","hashOfConfig":"28"},{"size":6331,"mtime":1612986774573,"results":"34","hashOfConfig":"28"},{"size":1870,"mtime":1613213530003,"results":"35","hashOfConfig":"28"},{"size":863,"mtime":1613213669217,"results":"36","hashOfConfig":"28"},{"size":5628,"mtime":1612958039377,"results":"37","hashOfConfig":"28"},{"size":4818,"mtime":1612892510769,"results":"38","hashOfConfig":"28"},{"size":6016,"mtime":1613231331478,"results":"39","hashOfConfig":"28"},{"size":1368,"mtime":1613074880667,"results":"40","hashOfConfig":"28"},{"size":1610,"mtime":1613214015067,"results":"41","hashOfConfig":"28"},{"size":2092,"mtime":1612963557557,"results":"42","hashOfConfig":"28"},{"size":2195,"mtime":1613304790506,"results":"43","hashOfConfig":"28"},{"size":5642,"mtime":1613311267673,"results":"44","hashOfConfig":"28"},{"size":11042,"mtime":1613306586044,"results":"45","hashOfConfig":"28"},{"size":347,"mtime":1613218699310,"results":"46","hashOfConfig":"28"},{"size":4767,"mtime":1613227427175,"results":"47","hashOfConfig":"28"},{"size":4097,"mtime":1613227129052,"results":"48","hashOfConfig":"28"},{"size":3118,"mtime":1613228661265,"results":"49","hashOfConfig":"28"},{"size":1591,"mtime":1613231192918,"results":"50","hashOfConfig":"28"},{"size":3560,"mtime":1613308719626,"results":"51","hashOfConfig":"28"},{"size":2018,"mtime":1613308894463,"results":"52","hashOfConfig":"28"},{"size":2327,"mtime":1613311157726,"results":"53","hashOfConfig":"28"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},"1bosnlm",{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"90","messages":"91","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"56"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"56"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"D:\\Projektai\\photoproof\\src\\index.tsx",[],["111","112"],"D:\\Projektai\\photoproof\\src\\App.tsx",[],"D:\\Projektai\\photoproof\\src\\utils\\makeId.tsx",[],"D:\\Projektai\\photoproof\\src\\firebase.tsx",[],"D:\\Projektai\\photoproof\\src\\types.ts",[],["113","114"],"D:\\Projektai\\photoproof\\src\\components\\Dashboard\\Dashboard.tsx",[],"D:\\Projektai\\photoproof\\src\\components\\NewCollectionPage\\NewCollection.tsx",[],"D:\\Projektai\\photoproof\\src\\components\\SignIn\\SignIn.tsx",[],"D:\\Projektai\\photoproof\\src\\components\\Settings\\Settings.tsx",[],"D:\\Projektai\\photoproof\\src\\components\\CollectionPage\\CollectionPage.tsx",[],"D:\\Projektai\\photoproof\\src\\components\\Dashboard\\CollectionsList\\CollectionsList.tsx",[],"D:\\Projektai\\photoproof\\src\\components\\EditCollection\\EditCollection.tsx",[],"D:\\Projektai\\photoproof\\src\\components\\ConfirmationDialog\\ConfirmationDialog.tsx",[],"D:\\Projektai\\photoproof\\src\\components\\ImageLoader\\ImageLoader.tsx",[],"D:\\Projektai\\photoproof\\src\\components\\Lightbox\\Lightbox.tsx",[],"D:\\Projektai\\photoproof\\src\\components\\CollectionPage\\LockedView\\LockedView.tsx",[],"D:\\Projektai\\photoproof\\src\\components\\CollectionPage\\SelectionView\\SelectionView.tsx",[],"D:\\Projektai\\photoproof\\src\\components\\EditCollection\\CollectionDetails\\CollectionDetails.tsx",["115"],"import React, { useEffect, useState } from 'react';\nimport styles from './styles.module.scss';\nimport { Link } from 'react-router-dom';\nimport { Collection, CollectionDetailsProps } from '../../../types';\nimport { collectionStatus, updateSettings } from '../../../firebase';\nimport {\n  Checkbox,\n  Typography,\n  Tooltip,\n  Button,\n  TextField,\n  FormControlLabel,\n  Paper,\n} from '@material-ui/core';\n\nimport { useForm, Controller } from 'react-hook-form';\n\nconst CollectionDetails: React.FC<CollectionDetailsProps> = ({\n  collectionId,\n  collection,\n  setCollection,\n  filteredPhotos,\n  setConfirmationDialogOpen,\n  setConfirmationDialogTitle,\n  setConfirmationDialogContentText,\n  setConfirmationDialogAgree,\n  setProgress,\n}) => {\n  const [copied, setCopied] = useState(false);\n\n  const {\n    register: registerSettings,\n    handleSubmit: handleSubmitSettings,\n    watch: watchSettings,\n    errors: errorsSettings,\n    getValues: getValuesSettings,\n    control: controlSettings,\n  } = useForm({\n    defaultValues: {\n      title: collection.title,\n      allowComments: collection.allowComments,\n      maxSelectRequired: collection.maxSelect.required,\n      minSelectRequired: collection.minSelect.required,\n      minSelectGoal: collection.minSelect.goal,\n      maxSelectGoal: collection.maxSelect.goal,\n    },\n  });\n\n  const minToggle = watchSettings('minSelectRequired');\n  const maxToggle = watchSettings('maxSelectRequired');\n\n  const copyUrl = (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n    const button = e.target as HTMLElement;\n    navigator.clipboard.writeText(button.innerHTML);\n    setCopied(true);\n    setTimeout(() => {\n      setCopied(false);\n    }, 2000);\n  };\n\n  const changeStatus = async (status: Collection['status']) => {\n    try {\n      await collectionStatus(collectionId, status);\n      if (collection) {\n        setCollection({ ...collection, status });\n      }\n    } catch (err) {\n      //\n    }\n    resetDialog();\n  };\n\n  const onSubmitSettings = async (data: any) => {\n    try {\n      await updateSettings(\n        {\n          title: data.title,\n          minSelect: {\n            required: data.minSelectRequired,\n            goal: data.minSelectGoal,\n          },\n          maxSelect: {\n            required: data.maxSelectRequired,\n            goal: data.maxSelectGoal,\n          },\n          allowComments: data.allowComments,\n        },\n        collectionId\n      );\n      if (collection) {\n        setCollection({\n          ...collection,\n          title: data.title,\n          minSelect: {\n            required: data.minSelectRequired,\n            goal: data.minSelectGoal,\n          },\n          maxSelect: {\n            required: data.maxSelectRequired,\n            goal: data.maxSelectGoal,\n          },\n          allowComments: data.allowComments,\n          status: 'selecting',\n        });\n      }\n    } catch (err) {\n      //\n    }\n  };\n\n  const copySelections = (\n    e: React.MouseEvent<HTMLButtonElement, MouseEvent>\n  ) => {\n    if (collection) {\n      const filenames = collection.photos\n        .filter((photo) => photo.selected)\n        .map((photo) => photo.filename);\n\n      navigator.clipboard.writeText(filenames.join(' '));\n    }\n    setCopied(true);\n    setTimeout(() => {\n      setCopied(false);\n    }, 2000);\n    resetDialog();\n  };\n\n  const confirmEdit = () => {\n    setConfirmationDialogOpen(true);\n    setConfirmationDialogTitle('This collection is already confirmed');\n    setConfirmationDialogContentText(\n      'Do you really want to edit an already confirmed collection?'\n    );\n    setConfirmationDialogAgree(() => () => changeStatus('editing'));\n  };\n\n  const confirmCopy = () => {\n    setConfirmationDialogOpen(true);\n    setConfirmationDialogTitle('This collection is not yet confirmed');\n    setConfirmationDialogContentText(\n      'Do you really want to copy selections from an unconfirmed collection?'\n    );\n    setConfirmationDialogAgree(() => copySelections);\n  };\n\n  const resetDialog = () => {\n    setConfirmationDialogOpen(false);\n    setConfirmationDialogTitle('');\n    setConfirmationDialogContentText('');\n    setConfirmationDialogAgree(() => {});\n    setProgress(0);\n  };\n\n  const selectedPhotos = collection?.photos.filter((photo) => photo.selected)\n    .length;\n\n  return (\n    <div>\n      <form onSubmit={handleSubmitSettings(onSubmitSettings)}>\n        {collection.status !== 'editing' ? (\n          <Button\n            variant='outlined'\n            onClick={\n              collection.status === 'confirmed'\n                ? confirmEdit\n                : () => changeStatus('editing')\n            }\n          >\n            Edit\n          </Button>\n        ) : (\n          <Button color='primary' variant='contained' type='submit'>\n            Save\n          </Button>\n        )}\n        {collection.status === 'editing' ? (\n          <div>\n            <TextField\n              label='Title'\n              name='title'\n              defaultValue={collection.title}\n              variant='outlined'\n              classes={{ root: styles.titleTextarea }}\n              margin='dense'\n              inputRef={registerSettings({ required: true, maxLength: 50 })}\n              error={!!errorsSettings.title}\n              helperText={errorsSettings.title ? 'Title is required' : ' '}\n            />\n          </div>\n        ) : (\n          <Typography variant='h4'>{collection.title}</Typography>\n        )}\n\n        <Typography>\n          Client URL:{' '}\n          <Tooltip title={copied ? 'copied!' : 'copy'}>\n            <Button onClick={copyUrl}>\n              {`${window.location.origin.toString()}/collection/${collectionId}`}{' '}\n            </Button>\n          </Tooltip>\n          <Button\n            to={`/collection/${collectionId}`}\n            component={Link}\n            variant='outlined'\n            size='small'\n          >\n            View\n          </Button>\n        </Typography>\n        <Typography>Status: {collection.status} </Typography>\n        {collection.status === 'confirmed' ? (\n          <Typography>Final comment: {collection.finalComment}</Typography>\n        ) : null}\n        <Typography variant='h6'>Settings:</Typography>\n        <div>\n          <FormControlLabel\n            control={\n              <Controller\n                control={controlSettings}\n                name='allowComments'\n                render={(\n                  { onChange, onBlur, value, name, ref },\n                  { invalid, isTouched, isDirty }\n                ) => (\n                  <Checkbox\n                    onBlur={onBlur}\n                    onChange={(e) => onChange(e.target.checked)}\n                    checked={value}\n                    inputRef={ref}\n                    disabled={collection.status !== 'editing'}\n                  />\n                )}\n              />\n            }\n            label='Allow comments'\n          />\n        </div>\n        <Typography variant='subtitle1'>selection goals:</Typography>\n        <div>\n          <FormControlLabel\n            control={\n              <Controller\n                control={controlSettings}\n                name='minSelectRequired'\n                render={(\n                  { onChange, onBlur, value, name, ref },\n                  { invalid, isTouched, isDirty }\n                ) => (\n                  <Checkbox\n                    onBlur={onBlur}\n                    onChange={(e) => onChange(e.target.checked)}\n                    checked={value}\n                    inputRef={ref}\n                    disabled={collection.status !== 'editing'}\n                  />\n                )}\n              />\n            }\n            label='minimum'\n          />\n          <div style={{ display: minToggle ? 'inline' : 'none' }}>\n            <TextField\n              name='minSelectGoal'\n              type='number'\n              variant='outlined'\n              size='small'\n              InputProps={{\n                inputProps: {\n                  max: 999,\n                  min: 1,\n                },\n              }}\n              inputRef={registerSettings({\n                min: '1',\n                max: '999',\n                valueAsNumber: true,\n                validate: {\n                  lowerThanMax: (value) =>\n                    !getValuesSettings('maxSelectRequired') ||\n                    getValuesSettings('maxSelectGoal') >= value,\n                },\n              })}\n              error={!!errorsSettings.minSelectGoal}\n              helperText={\n                errorsSettings.minSelectGoal &&\n                'Must be higher than maximum value'\n              }\n              disabled={collection.status !== 'editing'}\n            />\n          </div>\n        </div>\n        <div>\n          <FormControlLabel\n            control={\n              <Controller\n                control={controlSettings}\n                name='maxSelectRequired'\n                render={(\n                  { onChange, onBlur, value, name, ref },\n                  { invalid, isTouched, isDirty }\n                ) => (\n                  <Checkbox\n                    onBlur={onBlur}\n                    onChange={(e) => onChange(e.target.checked)}\n                    checked={value}\n                    inputRef={ref}\n                    disabled={collection.status !== 'editing'}\n                  />\n                )}\n              />\n            }\n            label='maximum'\n          />\n          <div style={{ display: maxToggle ? 'inline' : 'none' }}>\n            <TextField\n              name='maxSelectGoal'\n              type='number'\n              variant='outlined'\n              size='small'\n              InputProps={{\n                inputProps: {\n                  max: 999,\n                  min: 1,\n                },\n              }}\n              inputRef={registerSettings({\n                min: '1',\n                max: '999',\n                valueAsNumber: true,\n                validate: {\n                  higherThanMin: (value) =>\n                    !getValuesSettings('minSelectRequired') ||\n                    getValuesSettings('minSelectGoal') <= value,\n                },\n              })}\n              error={!!errorsSettings.maxSelectGoal}\n              helperText={\n                errorsSettings.maxSelectGoal &&\n                'Must be higher than minimum value'\n              }\n              disabled={collection.status !== 'editing'}\n            />\n          </div>\n        </div>\n      </form>\n      <Paper elevation={3} className={styles.centeredContainer}>\n        <Typography variant='h6'>Selected:</Typography>\n        <Typography variant='subtitle1'>\n          {selectedPhotos}/{collection.photos.length}\n        </Typography>\n        <Tooltip title={copied ? 'copied!' : 'copy'}>\n          <Button\n            onClick={\n              collection.status === 'confirmed' ? copySelections : confirmCopy\n            }\n            variant='outlined'\n          >\n            Copy selections\n          </Button>\n        </Tooltip>\n      </Paper>\n    </div>\n  );\n};\n\nexport default CollectionDetails;\n","D:\\Projektai\\photoproof\\src\\config.js",[],["116","117"],"D:\\Projektai\\photoproof\\src\\components\\EditCollection\\PhotoTableToolbar\\PhotoTableToolbar.tsx",[],"D:\\Projektai\\photoproof\\src\\components\\EditCollection\\PhotoTable\\PhotoTable.tsx",[],"D:\\Projektai\\photoproof\\src\\components\\EditCollection\\AddPhotosDialog\\AddPhotosDialog.tsx",[],"D:\\Projektai\\photoproof\\src\\components\\CommentDialog\\CommentDialog.tsx",[],"D:\\Projektai\\photoproof\\src\\components\\CollectionPage\\PhotoGrid\\PhotoGrid.tsx",[],"D:\\Projektai\\photoproof\\src\\components\\CollectionPage\\SelectionView\\ConfirmationForbiddenDialog\\ConfirmationForbiddenDialog.tsx",["118"],"import React from 'react';\nimport styles from './styles.module.scss';\nimport { ConfirmationForbiddenProps } from '../../../../types';\nimport {\n  Dialog,\n  DialogContent,\n  DialogTitle,\n  DialogActions,\n  Button,\n  DialogContentText,\n} from '@material-ui/core';\n\nconst ConfirmationForbiddenDialog: React.FC<ConfirmationForbiddenProps> = ({\n  collection,\n  selectedPhotos,\n  confirmForbidDialogOpen,\n  setConfirmForbidDialogOpen,\n}) => {\n  const requirementsText = () => {\n    if (collection.minSelect.required && collection.maxSelect.required) {\n      return (\n        <span>\n          you must select{' '}\n          <strong>\n            from {collection.minSelect.goal} to {collection.maxSelect.goal}\n          </strong>{' '}\n          photos.\n        </span>\n      );\n    } else if (\n      collection.minSelect.required &&\n      !collection.maxSelect.required\n    ) {\n      return (\n        <span>\n          you must select <strong>at least {collection.minSelect.goal}</strong>{' '}\n          photos.\n        </span>\n      );\n    } else if (\n      !collection.minSelect.required &&\n      collection.maxSelect.required\n    ) {\n      return (\n        <span>\n          you must select{' '}\n          <strong>a maximum of {collection.maxSelect.goal}</strong> photos.\n        </span>\n      );\n    }\n  };\n\n  return (\n    <Dialog\n      open={confirmForbidDialogOpen}\n      onClose={() => setConfirmForbidDialogOpen(false)}\n    >\n      <DialogTitle id='alert-dialog-title'>\n        Please adjust your selections!\n      </DialogTitle>\n      <DialogContent>\n        <DialogContentText>\n          You have selected <strong>{selectedPhotos}</strong> photos, but{' '}\n          {requirementsText()}\n        </DialogContentText>\n      </DialogContent>\n      <DialogActions>\n        <Button\n          onClick={() => setConfirmForbidDialogOpen(false)}\n          color='primary'\n          autoFocus\n        >\n          Cancel\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n};\n\nexport default ConfirmationForbiddenDialog;\n","D:\\Projektai\\photoproof\\src\\components\\CollectionPage\\SelectionView\\SelectionConfirmationDialog\\SelectionConfirmationDialog.tsx",["119"],{"ruleId":"120","replacedBy":"121"},{"ruleId":"122","replacedBy":"123"},{"ruleId":"120","replacedBy":"124"},{"ruleId":"122","replacedBy":"125"},{"ruleId":"126","severity":1,"message":"127","line":1,"column":17,"nodeType":"128","messageId":"129","endLine":1,"endColumn":26},{"ruleId":"120","replacedBy":"121"},{"ruleId":"122","replacedBy":"123"},{"ruleId":"126","severity":1,"message":"130","line":2,"column":8,"nodeType":"128","messageId":"129","endLine":2,"endColumn":14},{"ruleId":"126","severity":1,"message":"130","line":2,"column":8,"nodeType":"128","messageId":"129","endLine":2,"endColumn":14},"no-native-reassign",["131"],"no-negated-in-lhs",["132"],["131"],["132"],"@typescript-eslint/no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'styles' is defined but never used.","no-global-assign","no-unsafe-negation"]